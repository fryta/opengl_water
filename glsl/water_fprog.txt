#version 330


uniform sampler2D texDiff;
uniform sampler2D pool_tex;
uniform samplerCube cube_map;
uniform samplerCube pool_map;
uniform vec3 lightPos = vec3(-170.0, 100.0, 200.0);
uniform vec3 viewerPos = vec3(0.0, 0.0, 0.0);
uniform float shininess = 8.0;

uniform float f; // const needed in fresnel equation approximation
uniform float eta;
uniform float water_y_pos;

in vec3 pointWorld;
in vec3 normalWorld;
in vec2 texcoord;

out vec4 rslt;

uniform vec3 poolWalls[20] = {vec3(-4.0, 0.0, 2.0), vec3(4.0, 0.0, 2.0), vec3(4.0, -2.0, 2.0), vec3(-4.0, -2.0, 2.0), // front
							  vec3(-4.0, 0.0, -2.0), vec3(4.0, 0.0, -2.0), vec3(4.0, -2.0, -2.0), vec3(-4.0, -2.0, -2.0), // back
							  vec3(-4.0, 0.0, -2.0), vec3(-4.0, 0.0, 2.0), vec3(-4.0, -2.0, 2.0), vec3(-4.0, -2.0, -2.0), // left
							  vec3(4.0, 0.0, -2.0), vec3(4.0, 0.0, 2.0), vec3(4.0, -2.0, 2.0), vec3(4.0, -2.0, -2.0), // right
							  vec3(-4.0, -2.0, 2.0), vec3(4.0, -2.0, 2.0), vec3(4.0, -2.0, -2.0), vec3(-4.0, -2.0, -2.0)}; // bottom

uniform vec3 poolWallNormals[5] = {vec3(0.0, 0.0, -1.0), // front
								   vec3(0.0, 0.0, 1.0), // back
								   vec3(1.0, 0.0, 0.0), // left
								   vec3(-1.0, 0.0, 0.0), // right
								   vec3(0.0, 1.0, 0.0)}; // bottom

uniform vec3 poolWallPoints[5] = {vec3(0.0, -1.0, 2.0), // front
								  vec3(0.0, -1.0, -2.0), // back
								  vec3(-4.0, -1.0, 0.0), // left
								  vec3(4.0, -1.0, 0.0), // right
								  vec3(0.0, -2.0, 0.0)}; // bottom

uniform float eps = 0.000001;

vec3 intersectionVector;

vec3 line_plane_intersection(vec3 planePoint, vec3 planeNormal, vec3 refractPoint, vec3 refractedRay){
	float numerator = dot(planePoint - refractPoint, planeNormal);
	float denominator = dot(refractedRay, planeNormal);

	if(denominator == 0.0){// rownolegle 
		return vec3(0.0, 0.0, 0.0);
	}

	float distance = numerator / denominator;

	return refractPoint + refractedRay * distance;
}

int is_intersecting(int wallIndex, vec3 refractPoint, vec3 refractedRay){
	intersectionVector = line_plane_intersection(poolWallPoints[wallIndex].xyz,
													  poolWallNormals[wallIndex].xyz,
													  refractPoint,
													  refractedRay);

	// check for paralleism
	if(intersectionVector == vec3(0.0, 0.0, 0.0)){
		return -1;
	}
	
	// check x range
	if(poolWalls[4*wallIndex].x - eps > intersectionVector.x || poolWalls[4*wallIndex + 1].x + eps < intersectionVector.x){
		return -1;
	}

	// check y range
	if(poolWalls[4*wallIndex + 1].y + eps < intersectionVector.y || poolWalls[4*wallIndex + 2].y - eps > intersectionVector.y){
		return -1;
	}

	// check z range
	if(
		(wallIndex < 4 && (poolWalls[4*wallIndex + 2].z + eps < intersectionVector.z || poolWalls[4*wallIndex + 3].z - eps > intersectionVector.z)) || 
		(wallIndex == 4 && (poolWalls[4*wallIndex + 1].z + eps < intersectionVector.z || poolWalls[4*wallIndex + 2].z - eps > intersectionVector.z))
	){
		return -1;
	}

	return wallIndex;
}

int get_intersecting_wall(vec3 refractPoint, vec3 refractedRay){
	int intersectingTexture = -1;
	for(int i = 0; i < 5; i++){
		intersectingTexture = is_intersecting(i, refractPoint, refractedRay);
		if(intersectingTexture != -1){
			return intersectingTexture;
		}
	}
	return intersectingTexture;
}

vec2 castIntersectionCoords(int refractWallIndex){
	vec2 intersectionTexCoords;

	if(refractWallIndex == 0 || refractWallIndex == 1){ // front & back
		intersectionTexCoords.x = (intersectionVector.x + 4.0) / 4.0;
		intersectionTexCoords.y = (intersectionVector.y + 2.0) / 2.0;
	} else if(refractWallIndex == 2 || refractWallIndex == 3){ // left & right wall
		intersectionTexCoords.x = (intersectionVector.z + 2.0) / 4.0;
		intersectionTexCoords.y = (intersectionVector.y + 2.0) / 2.0;
	} else { // bottom
		intersectionTexCoords.x = (intersectionVector.x + 4.0) / 4.0;
		intersectionTexCoords.y = (intersectionVector.z + 2.0) / 4.0;
	}
	return intersectionTexCoords;
}

void main()
{
	vec3 N = normalize(normalWorld);
	vec3 L = normalize(lightPos - pointWorld);
	vec3 V = normalize(viewerPos - pointWorld);

	vec3 H = normalize(L + V);


	// refract + reflect

	vec3 incomeRay = pointWorld - viewerPos;

	vec3 reflection = reflect(incomeRay, N);
	vec3 reflection_coord = normalize(reflection);

	vec3 refraction = refract(incomeRay, N, eta);
	//refraction = refraction * vec3(0.5, 1.0, 1.0);
	vec3 refraction_coord = normalize(refraction);

	int refractWallIndex = get_intersecting_wall(pointWorld, refraction_coord);

	vec3 refractColor = vec3(1.0, 1.0, 1.0);
	if(refractWallIndex != -1)
		refractColor = texture(pool_tex, castIntersectionCoords(refractWallIndex)).rgb;

	/*if(refractWallIndex == 0)
		refractColor = vec3(78.0 / 255.0, 34.0 / 255.0, 4.0 / 255.0);
	if(refractWallIndex == 1)
		refractColor = vec3(78.0 / 255.0, 34.0 / 255.0, 4.0 / 255.0);
	if(refractWallIndex == 2)
		refractColor = vec3(121.0 / 255.0, 56.0 / 255.0, 11.0 / 255.0);
	if(refractWallIndex == 3)
		refractColor = vec3(121.0 / 255.0, 56.0 / 255.0, 11.0 / 255.0);
	if(refractWallIndex == 4)
		refractColor = vec3(1.0, 129.0 / 255.0, 22.0 / 255.0);*/

	float refraction_ratio;
	vec3 kA; 
	if(viewerPos.y < water_y_pos){
		refraction_ratio = f + (1 - f) * pow(1 - dot(normalize(incomeRay), N), 5);
		kA = mix(texture(texDiff, texcoord).rgb, texture(cube_map, -refraction_coord).rgb, 0.80);
	} else {
		refraction_ratio = f + (1 - f) * pow(1 - dot(-normalize(incomeRay), N), 5);
		kA = mix(texture(texDiff, texcoord).rgb, mix(refractColor, texture(cube_map, reflection_coord).rgb, 2.5 * refraction_ratio), 0.80);
	}

	// END: refract + reflect 

	float ambient_factor = 0.6f;
	float diff_factor = max(dot(N, L), 0.0);
	float spec_factor = (shininess + 2.0f)*pow(max(dot(N, H), 0.0), shininess)/32.0;
	
	//vec3 kA = mix(texture(texDiff, texcoord).rgb, mix(texture(pool_map, refraction_coord).rgb, texture(cube_map, reflection_coord).rgb, refraction_ratio), 0.8);

	vec3 kD = kA;//vec3(0.0f, 0.0f, 0.1f);//kA;
	vec3 kS = vec3(1.0, 1.0, 1.0);

	rslt = vec4(kS*spec_factor + kD*diff_factor + kA*ambient_factor, 1.0);
}
