#version 330


in vec3 point;
in vec2 coord;
in vec3 normal;
in vec3 tgtU;
in vec3 tgtV;

out vec3 pointWorld;
out vec3 normalWorld;
out vec3 tgtUWorld;
out vec3 tgtVWorld;
out vec2 texcoord;
out vec3 reflection_coord;
out vec3 refraction_coord;
out float refraction_ratio;

uniform mat4 model;
uniform mat4 modelView;
uniform mat4 proj;
uniform mat4 rot_inv;

uniform sampler2D texDiff;
uniform sampler2D wave_height;

uniform vec2 size;
uniform float h_x;
uniform float h_z;
uniform float f; // const needed in fresnel equation approximation
uniform float eta;

void main()
{
	//### calculate normal according to wave height
	vec2 coords_left = coord + vec2(-1.0, 0.0)/size;
	vec2 coords_right = coord + vec2(1.0, 0.0)/size;
	vec2 coords_up = coord + vec2(0.0, 1.0)/size;
	vec2 coords_down = coord + vec2(0.0, -1.0)/size;
	
	float u = texture(wave_height, coord).r;
	float u_left = texture(wave_height, coords_left).r;
	float u_right = texture(wave_height, coords_right).r;
	float u_up = texture(wave_height, coords_up).r;
	float u_down = texture(wave_height, coords_down).r;
	
	vec3 n1 = vec3(h_x*2.0, (u_right - u_left), 0.0);
	vec3 n2 = vec3(0.0, u_up - u_down, h_z*2.0);
	vec3 normal_calc = normalize(cross(n2, n1));
	//###
	vec3 newPoint = vec3(point.x, point.y + u, point.z);

	pointWorld  = (model*vec4(newPoint, 1.0)).xyz;
	normalWorld = (model*vec4(normal_calc, 0.0)).xyz;
	tgtUWorld   = (model*vec4(tgtU, 0.0)).xyz;
	tgtVWorld   = (model*vec4(tgtV, 0.0)).xyz;
	texcoord = coord;

	vec3 normalEye = (modelView*vec4(normal_calc, 0.0)).xyz; // 0.0 -> without translation
	vec3 vertexEye = (modelView*vec4(newPoint, 1.0)).xyz; // 1.0 -> with translation

	vec4 reflection = rot_inv * vec4(reflect(vertexEye, normalEye), 1.0);
	reflection_coord = normalize(reflection.xyz);

	vec4 refraction = rot_inv * vec4(refract(vertexEye, normalEye, eta), 1.0);
	refraction_coord = normalize(refraction.xyz);

	refraction_ratio = f + (1 - f) * pow(1 - dot(-normalize(vertexEye), normalEye), 5);
	
	gl_Position = proj*modelView*vec4(newPoint, 1.0);
}
